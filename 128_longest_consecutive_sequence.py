# -*- coding: utf-8 -*-
"""128. Longest Consecutive Sequence.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gd_RXF1gscwan8MPcbm6X2YNJZ1zxK77

Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.
"""

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        sortedset = set(nums)
        sorted_nums = sorted(sortedset)
        listofresult = []
        result = []
        length = 0
        if len(nums)> 0:
            j=sorted_nums[0]
            for i in range(len(sorted_nums)):
                if j == sorted_nums[i]:
                    result.append(sorted_nums[i])
                else:
                    j = sorted_nums[i]
                    listofresult.append(len(result))
                    result = []
                    result.append(sorted_nums[i])

                j += 1
            listofresult.append(len(result))

            for i in range(len(listofresult)):
                if length < listofresult[i]:
                    length = listofresult[i]
        return (length)